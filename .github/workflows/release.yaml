name: Build/Release Desktop

on:
  push:
    # TODO: comment this out, only used for development
    branches: [ code-sign ]
    # only for version 2.x.x releases and release candidates
    tags:
      - v2.?.?*

env:
  image_name: "threatdragon/owasp-threat-dragon"

jobs:
  site_unit_tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: td.vue
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache NPM dir
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.OS }}-pnpm-cache-server-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-cache-server-

      - name: Install packages
        run: |
          npm i -g pnpm
          pnpm install --frozen-lockfile

      - name: lint
        run: npm run lint

      - name: Unit test
        run: npm run test:unit

  server_unit_tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: td.server
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache NPM dir
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.OS }}-pnpm-cache-server-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-cache-server-

      - name: Install packages
        run: |
          npm i -g pnpm
          pnpm install --frozen-lockfile

      - name: lint
        run: npm run lint

      - name: Unit test
        run: npm run test:unit

  desktop_unit_tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: td.vue
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache NPM dir
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.OS }}-pnpm-cache-server-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-cache-server-

      - name: Install packages
        run: |
          npm i -g pnpm
          pnpm install --frozen-lockfile

      - name: lint
        run: npm run lint
  
      - name: Unit test
        run: npm run test:desktop

  desktop_e2e_tests:
    runs-on: windows-latest
    needs: [desktop_unit_tests, site_unit_tests]
    defaults:
      run:
        working-directory: td.vue
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # ubuntu-latest does not find this chrome driver
      # so until this is fixed, use only windows-latest
      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1.0.1

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache NPM dir
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.OS }}-pnpm-cache-server-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-pnpm-cache-server-

      - name: Install packages
        run: |
          npm i -g pnpm
          pnpm install --frozen-lockfile

      - name: Build application
        # test only so do not publish
        run: npm run build:desktop -- --publish=never

      # works for macos-latest running locally but pipeline times out 
      # so until this is fixed, use only windows-latest
      - name: End to end tests
        run: npm run test:e2e:desktop

  desktop_installers:
    runs-on: ${{ matrix.config.os }}
    needs: [desktop_unit_tests, site_unit_tests, desktop_e2e_tests]
    strategy:
      matrix:
        config:
          - { os: macos-latest, os_short: osx }
          - { os: ubuntu-latest, os_short: lin }
          - { os: windows-latest, os_short: win }
    defaults:
      run:
        working-directory: td.vue
    steps:
      - name: Check out
        uses: actions/checkout@v3

      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache NPM dir
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.OS }}-pnpm-cache-server-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.OS }}-npm-cache-server-

      - name: Install packages
        run: |
          npm i -g pnpm
          pnpm install --frozen-lockfile

      # Build and publish MacOS installer to github Release Draft
      # the draft name uses version and is created if it does not already exist
      - name: Release for MacOS - prepare for notarization
        # Import Apple API key for app notarization on macOS
        # see github.com/samuelmeuli/action-electron-builder#notarization
        run: |
          mkdir -p ~/private_keys/
          echo '${{ secrets.API_KEY }}' > ~/private_keys/AuthKey_${{ secrets.API_KEY_ID }}.p8
        if: startsWith(matrix.config.os, 'macos')

      - name: Release for MacOS
        run: npm run build:desktop -- --mac --publish always
        env:
          # MacOS signing certificate and password
          # see github.com/samuelmeuli/action-electron-builder#code-signing
          CSC_KEY_PASSWORD: ${{ secrets.MAC_CERTS_PASSWORD }}
          CSC_LINK:  ${{ secrets.MAC_CERTS }}
          # MacOS notarization API IDs
          # see github.com/samuelmeuli/action-electron-builder#notarization
          API_KEY_ID: ${{ secrets.API_KEY_ID }}
          API_KEY_ISSUER_ID: ${{ secrets.API_KEY_ISSUER_ID }}
          # github token is automatically provided to the action
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: startsWith(matrix.config.os, 'macos')

      # Build and publish Windows installer to github Release Draft
      - name: Release for Windows
        # follow Comodo signing instructions
        # comodosslstore.com/resources/comodo-code-signing-certificate-instructions
        env:
          # Windows signing certificate and password
          CSC_KEY_PASSWORD: ${{ secrets.WINDOWS_CERT_PASSWORD}}
          CSC_LINK:  ${{ secrets.WINDOW_CERTS }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run build:desktop -- --windows --publish always
        if: startsWith(matrix.config.os, 'windows')

      # Build and publish Linux installers to github Release Draft
      # for all linux images EXCEPT for the snap
      # Snaps do not publish, even with snapcraft installed, so use Snap Store
      - name: Release for Linux
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run build:desktop -- --linux AppImage deb rpm --publish always
        if: startsWith(matrix.config.os, 'ubuntu')

      # Build the snap, but do not publish
      - name: Release for Linux snap
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run build:desktop -- --linux snap
        if: startsWith(matrix.config.os, 'ubuntu')

      - name: Release for Linux snap - login to Snap Store
        uses: samuelmeuli/action-snapcraft@v1
        with:
          snapcraft_token: ${{ secrets.SNAPCRAFT_TOKEN }}
        # Only install Snapcraft on Ubuntu
        if: startsWith(matrix.config.os, 'ubuntu')

      - name: Release for Linux snap - upload to Snap Store
        shell: bash
        run: snapcraft upload --release=stable installers/threat-dragon-desktop*.snap
        if: startsWith(matrix.config.os, 'ubuntu')

  dockerhub_release:
    runs-on: ubuntu-latest
    needs: [server_unit_tests, site_unit_tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: Setup dockerx cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Get Release Version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Build and push to Docker Hub
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: ./
          file: ./Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: ${{ startsWith(github.ref, 'refs/tags/v') }}
          tags: ${{ env.image_name }}:${{ env.RELEASE_VERSION }},stable
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

# TODO: Can we add a table with shasums to the release description?
# Is it worth automating that portion?
